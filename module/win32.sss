#export {
    Device_Type,
    Security_Attributes,

    Sharing_Mode,
    Creation_Disposition,
    Access,

    CloseHandle   als close_file,
    CreateFileA   als open_file,
    GetStdHandle  als get_std_handle,
    WriteConsoleA als write_console,
    WriteFile     als write_file
}

PVOID  :: typedef *void;
HANDLE :: typedef PVOID;
DWORD  :: typedef n32;
PDWORD :: typedef *DWORD;
BOOL   :: typedef bool;

Sharing_Mode :: enum {
    NONE              :: 16b0000_0000;
    FILE_SHARE_DELETE :: 16b0000_0004;
    FILE_SHARE_READ   :: 16b0000_0001;
    FILE_SHARE_WRITE  :: 16b0000_0002;
}

Creation_Disposition :: enum {
    CREATE_NEW        :: 1;
    CREATE_ALWAYS     :: 2;
    OPEN_EXISTING     :: 3;
    OPEN_ALWAYS       :: 4;
    TRUNCATE_EXISTING :: 5;
}

Access :: enum {
    GENERIC_WRITE     :: 1073741824;
}

Win32_Offset :: obj {
    Offset     : DWORD;
    OffsetHigh : DWORD;
}

Overlapped :: obj {
    Internal       : PDWORD;
    InternalHigh   : PDWORD;

    Structure      : union {
        Versatz    : Win32_Offset;
        Pointer    : PVOID;
    };

    hEvent         : PVOID;
}

Device_Type :: enum {
    STD_INPUT_HANDLE  :: -10;
    STD_OUTPUT_HANDLE :: -11;
    STD_ERROR_HANDLE  :: -12;
}

Security_Attributes :: obj {
    nLength              : DWORD;
    lpSecurityDescriptor : PVOID;
    bInheritHandle       : bool;
}

GetStdHandle  :: proc(device_type            : DWORD) -> HANDLE #sys_call "kernel32.dll";

WriteConsoleA :: proc(hConsoleOutput         : PVOID,
                      lpBuffer               : PVOID,
                      nNumberOfCharsToWrite  : DWORD,
                      lpNumberOfCharsWritten : PDWORD,
                      lpReserved             : PVOID) #sys_call "kernel32.dll";

CreateFileA   :: proc(lpFileName             : string,
                      dwDesiredAccess        : DWORD,
                      dwShareMode            : DWORD,
                      lpSecurityAttributes   : *Security_Attributes,
                      dwCreationDisposition  : DWORD,
                      dwFlagsAndAttributes   : DWORD,
                      hTemplateFile          : PVOID) -> HANDLE #sys_call "kernel32.dll";

WriteFile     :: proc(hFile                  : HANDLE,
                      lpBuffer               : string,
                      nNumberOfBytesToWrite  : DWORD,
                      lpNumberOfBytesWritten : PDWORD,
                      lpOverlapped           : *Overlapped) -> bool #sys_call "kernel32.dll";

CloseHandle   :: proc(hObject                : HANDLE ) -> BOOL #sys_call "kernel32.dll";

